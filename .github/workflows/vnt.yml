name: 编译预发布版本vnt-cli

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '编译vnt-cli的lbl8603/vnt分支或版本号，默认主分支main'
        required: true
        default: 'main'
      target:
        description: '请选择目标CPU架构'
        required: true
        type: string
        default: 'aarch64'
        options:
          - aarch64
          - armv7l-eabihf
          - armv7l-eabi
          - arm-eabihf
          - arm-eabi
          - mipsel
          - mips
          - i686
          - x86_64
      openssl:
        description: '添加使用源码编译openssl加密算法'
        required: true
        default: false
        type: boolean
      ring:
        description: '添加使用ring中的加密算法'
        required: true
        default: false
        type: boolean
      cbc:
        description: '添加支持aes_cbc加密'
        required: true
        default: false
        type: boolean
      ecb:
        description: '添加支持aes_ecb加密'
        required: true
        default: false
        type: boolean
      gcm:
        description: '添加支持aes_gcm加密'
        required: true
        default: false
        type: boolean
      sm4:
        description: '添加支持sm4_cbc加密'
        required: true
        default: false
        type: boolean
      chacha20:
        description: '添加支持chacha20和chacha20_poly1305加密'
        required: true
        default: false
        type: boolean
      server:
        description: '添加支持服务端加密'
        required: true
        default: false
        type: boolean
      ip_proxy:
        description: '添加内置ip代理'
        required: true
        default: false
        type: boolean
      port:
        description: '添加端口映射'
        required: true
        default: false
        type: boolean
      log:
        description: '添加日志'
        required: true
        default: false
        type: boolean
      command:
        description: '添加list、route等命令'
        required: true
        default: false
        type: boolean
      config:
        description: '添加yaml配置文件'
        required: true
        default: false
        type: boolean
      lz4:
        description: '添加lz4压缩'
        required: true
        default: false
        type: boolean
      zstd:
        description: '添加zstd压缩'
        required: true
        default: false
        type: boolean
      upx:
        description: '编译完成后是否使用upx压缩vnt-cli以减少二进制体积'
        required: true
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai
  branch: "${{ github.event.inputs.branch }}"
  target: "${{ github.event.inputs.target }}"
  openssl: "${{ github.event.inputs.openssl }}"
  ring: "${{ github.event.inputs.ring }}"
  cbc: "${{ github.event.inputs.cbc }}"
  ecb: "${{ github.event.inputs.ecb }}"
  gcm: "${{ github.event.inputs.gcm }}"
  sm4: "${{ github.event.inputs.sm4 }}"
  chacha20: "${{ github.event.inputs.chacha20 }}"
  server: "${{ github.event.inputs.server }}"
  ip_proxy: "${{ github.event.inputs.ip_proxy }}"
  port: "${{ github.event.inputs.port }}"
  log: "${{ github.event.inputs.log }}"
  command: "${{ github.event.inputs.command }}"
  config: "${{ github.event.inputs.config }}"
  lz4: "${{ github.event.inputs.lz4 }}"
  zstd: "${{ github.event.inputs.zstd }}"
jobs:
 build:
    runs-on: ubuntu-latest
    steps:
      - name: 设置编译环境
        run: |
            case $target in 
              mipsel)
                TARGET=mipsel-unknown-linux-musl
                MUSL_URI=mipsel-linux-musl-cross
                NAME=vnt-cli_linux-mipsel
                ;;
              aarch64)
               TARGET=aarch64-unknown-linux-musl
                MUSL_URI=aarch64-linux-musl-cross
                NAME=vnt-cli_linux-aarch64
                ;;
              armv7-eabihf)
                TARGET=armv7-unknown-linux-musleabihf
                MUSL_URI=armv7l-linux-musleabihf-cross
                NAME=vnt-cli_linux-armv7-eabi
                ;;
              armv7-eabi)
                TARGET=armv7-unknown-linux-musleabi
                MUSL_URI=armv7m-linux-musleabi-cross
                NAME=vnt-cli_linux-ramv7-eabihf
                ;;
              arm-eabihf)
                TARGET=arm-unknown-linux-musleabihf
                MUSL_URI=arm-linux-musleabihf-cross
                NAME=vnt-cli_linux-arm-eabihf
                ;;
              arm-eabi)
                TARGET=arm-unknown-linux-musleabi
                MUSL_URI=arm-linux-musleabi-cross
                NAME=vnt-cli_linux-arm-eabi
                ;;
              mips)
                TARGET=mips-unknown-linux-musl
                MUSL_URI=mips-linux-musl-cross
                NAME=vnt-cli_linux-mips
                ;;
              i686)
                TARGET=i686-unknown-linux-musl
                NAME=vnt-cli_linux-i686
                ;;
              x86_64)
                TARGET=x86_64-unknown-linux-musl
                NAME=vnt-cli_linux-x86_64
                ;;
            esac
            cmd_list=()

            if [ -n "$openssl" ]; then
              cmd_list+=("$openssl")
            fi
            if [ -n "$ring" ]; then
              cmd_list+=("$ring")
            fi
            if [ -n "$cbc" ]; then
              cmd_list+=("$cbc")
            fi
            if [ -n "$ecb" ]; then
              cmd_list+=("$ecb")
            fi
            if [ -n "$gcm" ]; then
              cmd_list+=("$gcm")
            fi
            if [ -n "$sm4" ]; then
              cmd_list+=("$sm4")
            fi
            if [ -n "$chacha20" ]; then
              cmd_list+=("$chacha20")
            fi
            if [ -n "$server" ]; then
              cmd_list+=("$server")
            fi
            if [ -n "$ip_proxy" ]; then
              cmd_list+=("$ip_proxy")
            fi
            if [ -n "$port" ]; then
              cmd_list+=("$port")
            fi
            if [ -n "$log" ]; then
              cmd_list+=("$log")
            fi
            if [ -n "$command" ]; then
              cmd_list+=("$command")
            fi
            if [ -n "$config" ]; then
              cmd_list+=("$config")
            fi
            if [ -n "$lz4" ]; then
              cmd_list+=("$lz4")
            fi
            if [ -n "$zstd" ]; then
              cmd_list+=("$zstd")
            fi
            if [ ${#cmd_list[@]} -ne 0 ]; then
              cmd=$(IFS=,; echo "${cmd_list[*]}")
              echo "FEATURES='--features${cmd}'" >> $GITHUB_ENV
            fi
            echo "TARGET=${TARGET}" >> $GITHUB_ENV
            echo "NAME=${NAME}" >> $GITHUB_ENV
            if [[ $target != i686 ]] && [[ $target != x86_64 ]] ; then
              echo "MUSL_URI=${MUSL_URI}" >> $GITHUB_ENV
              mkdir -p /opt/musl_gcc 
              wget -c https://musl.cc/$MUSL_URI.tgz -P /opt/musl_gcc/
              tar zxf /opt/musl_gcc/$MUSL_URI.tgz -C /opt/musl_gcc/
              sudo ln -s /opt/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
            else
              sudo apt-get update && sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools
            fi
            if [[ $TARGET == mips-unknown-linux-musl ]] || [[ $TARGET == mipsel-unknown-linux-musl ]] ; then
            rustup install 1.72.1
            rustup default 1.72.1
            fi
            sudo timedatectl set-timezone "Asia/Shanghai"
            cat >>~/.cargo/config <<EOF
            [target.aarch64-unknown-linux-musl]
            linker = "aarch64-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-musleabihf]
            linker = "armv7l-linux-musleabihf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-musleabi]
            linker = "armv7m-linux-musleabi-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.arm-unknown-linux-musleabihf]
            linker = "arm-linux-musleabihf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.arm-unknown-linux-musleabi]
            linker = "arm-linux-musleabi-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.mipsel-unknown-linux-musl]
            linker = "mipsel-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.mips-unknown-linux-musl]
            linker = "mips-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]  
            EOF
      - name: 添加编译平台
        run: rustup target add $TARGET
      - name: 开始编译
        run: |
          git clone -b ${{ env.branch }} https://github.com/lbl8603/vnt /opt/vnt
          cd /opt/vnt
          cargo build --package vnt-cli --release --target $TARGET --no-default-features $FEATURES
          mkdir -p /opt/bin
          mv /opt/vnt/target/${TARGET}/release/vnt-cli /opt/bin/vnt-cli
      - name: Install UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          install-only: true
      - name: 打包压缩
        if: github.event.inputs.upx == 'true'
        run: |
          cd /opt/bin
          upx --lzma --best vnt-cli
      - name: 上传
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.NAME }}
          path: /opt/bin/*
