name: vntapp重定向

on:
   workflow_dispatch:
    inputs:
      password:
        description: '请输入签名证书密码：（不支持中文密码，且最少6位字符）'
        required: false
        default: 'password'
env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai
  password: "${{ github.event.inputs.password }}"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 设置JDK环境
        uses: actions/setup-java@v1
        with:
          java-version: 17
          
      - name: 设置NDK环境
        run: |
           wget -q https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
           unzip -q android-ndk-r26d-linux.zip -d /opt/ndk
           #echo "/opt/ndk/android-ndk-r26d" >> $GITHUB_PATH  
           #echo "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          
      - name: 设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
         channel: stable  

      - name: 设置cargo环境
        run: |
           rustup target add aarch64-linux-android
           rustup target add armv7-linux-androideabi
           rustup target add x86_64-linux-android
           rustup target add i686-linux-android
         
      - name: 克隆源码
        run: git clone -b Location https://github.com/cn1095/VntApp /opt/vnt
        
      - name: 构建安卓so库
        run: |
           cd /opt/vnt/rust
           rm -rf .cargo/config
           export PATH=/opt/ndk/android-ndk-r26d:/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH  
           #echo "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH 
           cat >>./.cargo/config <<EOF
            [target.armv7-linux-androideabi]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"

            [target.aarch64-linux-android]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"

            [target.i686-linux-android]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"

            [target.x86_64-linux-android]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
           EOF
           mkdir -p /opt/bin
           cargo build --target aarch64-linux-android --release
           ls /opt/vnt/rust/target/aarch64-linux-android/release
           mv -f /opt/vnt/rust/target/aarch64-linux-android/release/*.so /opt/vnt/android/app/src/main/jniLibs/arm64-v8a/librust_lib_vnt_app.so
          
           cargo clean
           cargo build --target x86_64-linux-android --release
           mv -f /opt/vnt/rust/target/x86_64-linux-android/release/*.so /opt/vnt/android/app/src/main/jniLibs/x86_64/librust_lib_vnt_app.so
          
           cargo clean
           export CC_i686_linux_android="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
           export CC="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
           cargo build --target i686-linux-android --release 
           mv -f /opt/vnt/rust/target/i686-linux-android/release/*.so /opt/vnt/android/app/src/main/jniLibs/x86/librust_lib_vnt_app.so

           cargo clean
           export CC_armv7_linux_androideabi="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
           export CC="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
           cargo build --target armv7-linux-androideabi --release 
           mv -f /opt/vnt/rust/target/armv7-linux-androideabi/release/*.so /opt/vnt/android/app/src/main/jniLibs/armeabi-v7a/librust_lib_vnt_app.so

      - name: 构建安卓APK
        run: |
         cd /opt/vnt
         #cp -rf ./windows/dlls/amd64 ./windows/dlls/x86
         flutter pub get
         flutter build apk --release
         find /opt/vnt -type f -name "*.apk"
         du -ah /opt/vnt/build
      - name: 签名APK
        run: |
         mkdir -p /opt/jks
         cd /opt/jks
         #生成签名文件keystore.jks
         keytool -genkey -v -keystore keystore.jks -storepass $password -alias key -keypass $password -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android, OU=Android, O=Android, L=BeiJing, ST=BeiJing, C=CN"
         
        
         du -k /opt/jks/*
      - name : 上传
        uses: actions/upload-artifact@master
        if: always()
        with:
         name: vntAPP
         path: /opt/vntAPP/*
